#!/usr/bin/env ruby

# This is a command line client that can do a number of read operations
# on a git repository in pure ruby. This may be helpful if you have access
# to a computer that has no C compiler but you want to do some git stuff 
# on it.  It's also helpful for me to test Git stuff with.
# 
# author : Scott Chacon (schacon@gmail.com)
#
# todo:
#   add --git-dir 
#   add --log-file 
#   add --help

require 'rubygems'
require 'git-ruby'
require 'logger'

command = ARGV[0]

if !command
  puts 'You have to provide a command'
  puts 'usage: gitr (command) [args]'
  puts
  puts 'commands: init'
  puts '          clone (repo_uri) (name)'
  puts '          add'
  puts '          commit'
  puts '          ls-files'
  puts '          log'
  puts '          log-shas'
  puts '          cat-file (treeish)'
  puts '          rev-parse (treeish)'
  puts '          branches'
  puts '          config'
  puts '          ls-tree (tree)'
  exit
end

git_dir = ENV['GIT_DIR'] || '.git'
working_dir = ENV['GIT_WORKING_DIR'] || '.'
#@git = Git.bare(git_dir, :log => Logger.new(STDOUT))

if !['init', 'clone'].include?(command)
  @git = GitRuby.open(working_dir)
end

case command
when 'init'
  GitRuby.init
when 'clone'
  if ARGV[2]
    GitRuby.clone(ARGV[1], ARGV[2], :logger => Logger.new(STDERR))
  else
    puts 'please specify a name'
  end
when 'ls-files'
  puts @git.index.to_s
when 'checkout'
  @git.checkout(ARGV[1])
when 'add'
  @git.add(ARGV[1])
when 'commit'
  @git.commit(ARGV[1])
when 'log'
  # gitr log
  @git.log.each do |l|
    puts 'commit ' + l.sha
    puts l.contents
    puts
  end
when 'rev-list'
  # gitr log-shas
  puts @git.lib.rev_list
when 'cat-file'
  # gitr cat-file
  puts @git.cat_file(ARGV[1])
when 'rev-parse'
  # gitr rev-parse
  puts @git.revparse(ARGV[1])  
when 'branches'
  # gitr branches
  puts @git.branches
when 'config'
  # gitr config
  @git.config.sort.each do |k,v|
    puts "#{k} : #{v}"
  end
when 'ls-tree'
  # gitr ls-tree
  tree = @git.gtree(ARGV[1])
  tree.blobs.sort.each do |name, c|
    puts [[c.mode, c.type, c.sha].join(" "), name].join("\t")
  end
  tree.trees.sort.each do |name, c|
    puts [[c.mode, c.type, c.sha].join(" "), name].join("\t")
  end
when 'done'
  puts '<LtCG>i dont care who you are, thats funny right there...</LtCG>'
else
  puts 'command not found'
end

# todo:
#  gitr pack-browse
#  gitr diff / stats ?
